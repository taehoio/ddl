// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_dml_user_role.pb.go

// Package userddlv1 is a generated GoMock package.
package userddlv1

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// MockUserRoleRecorder is a mock of UserRoleRecorder interface.
type MockUserRoleRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockUserRoleRecorderMockRecorder
}

// MockUserRoleRecorderMockRecorder is the mock recorder for MockUserRoleRecorder.
type MockUserRoleRecorderMockRecorder struct {
	mock *MockUserRoleRecorder
}

// NewMockUserRoleRecorder creates a new mock instance.
func NewMockUserRoleRecorder(ctrl *gomock.Controller) *MockUserRoleRecorder {
	mock := &MockUserRoleRecorder{ctrl: ctrl}
	mock.recorder = &MockUserRoleRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRoleRecorder) EXPECT() *MockUserRoleRecorderMockRecorder {
	return m.recorder
}

// FindByIDs mocks base method.
func (m *MockUserRoleRecorder) FindByIDs(db *sql.DB, ids []uint64) ([]*UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", db, ids)
	ret0, _ := ret[0].([]*UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockUserRoleRecorderMockRecorder) FindByIDs(db, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockUserRoleRecorder)(nil).FindByIDs), db, ids)
}

// FindByUserId mocks base method.
func (m *MockUserRoleRecorder) FindByUserId(db *sql.DB, userId interface{}) ([]*UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", db, userId)
	ret0, _ := ret[0].([]*UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockUserRoleRecorderMockRecorder) FindByUserId(db, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockUserRoleRecorder)(nil).FindByUserId), db, userId)
}

// FindOneByUserId mocks base method.
func (m *MockUserRoleRecorder) FindOneByUserId(db *sql.DB, userId interface{}) (*UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByUserId", db, userId)
	ret0, _ := ret[0].(*UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByUserId indicates an expected call of FindOneByUserId.
func (mr *MockUserRoleRecorderMockRecorder) FindOneByUserId(db, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByUserId", reflect.TypeOf((*MockUserRoleRecorder)(nil).FindOneByUserId), db, userId)
}

// Get mocks base method.
func (m *MockUserRoleRecorder) Get(db *sql.DB, id uint64) (*UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", db, id)
	ret0, _ := ret[0].(*UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRoleRecorderMockRecorder) Get(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRoleRecorder)(nil).Get), db, id)
}

// List mocks base method.
func (m *MockUserRoleRecorder) List(db *sql.DB, lastID *wrapperspb.UInt64Value, asc bool, limit int64) ([]*UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", db, lastID, asc, limit)
	ret0, _ := ret[0].([]*UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserRoleRecorderMockRecorder) List(db, lastID, asc, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserRoleRecorder)(nil).List), db, lastID, asc, limit)
}

// Save mocks base method.
func (m *MockUserRoleRecorder) Save(db *sql.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", db)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserRoleRecorderMockRecorder) Save(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRoleRecorder)(nil).Save), db)
}
