// Code generated by MockGen. DO NOT EDIT.
// Source: ./oneonone_dml_category_question.pb.go

// Package oneononeddlv1 is a generated GoMock package.
package oneononeddlv1

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// MockCategoryQuestionRecorder is a mock of CategoryQuestionRecorder interface.
type MockCategoryQuestionRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryQuestionRecorderMockRecorder
}

// MockCategoryQuestionRecorderMockRecorder is the mock recorder for MockCategoryQuestionRecorder.
type MockCategoryQuestionRecorderMockRecorder struct {
	mock *MockCategoryQuestionRecorder
}

// NewMockCategoryQuestionRecorder creates a new mock instance.
func NewMockCategoryQuestionRecorder(ctrl *gomock.Controller) *MockCategoryQuestionRecorder {
	mock := &MockCategoryQuestionRecorder{ctrl: ctrl}
	mock.recorder = &MockCategoryQuestionRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryQuestionRecorder) EXPECT() *MockCategoryQuestionRecorderMockRecorder {
	return m.recorder
}

// FindByCategoryId mocks base method.
func (m *MockCategoryQuestionRecorder) FindByCategoryId(db *sql.DB, categoryId interface{}) ([]*CategoryQuestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCategoryId", db, categoryId)
	ret0, _ := ret[0].([]*CategoryQuestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCategoryId indicates an expected call of FindByCategoryId.
func (mr *MockCategoryQuestionRecorderMockRecorder) FindByCategoryId(db, categoryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCategoryId", reflect.TypeOf((*MockCategoryQuestionRecorder)(nil).FindByCategoryId), db, categoryId)
}

// FindByIDs mocks base method.
func (m *MockCategoryQuestionRecorder) FindByIDs(db *sql.DB, ids []uint64) ([]*CategoryQuestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", db, ids)
	ret0, _ := ret[0].([]*CategoryQuestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockCategoryQuestionRecorderMockRecorder) FindByIDs(db, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockCategoryQuestionRecorder)(nil).FindByIDs), db, ids)
}

// FindOneByCategoryId mocks base method.
func (m *MockCategoryQuestionRecorder) FindOneByCategoryId(db *sql.DB, categoryId interface{}) (*CategoryQuestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByCategoryId", db, categoryId)
	ret0, _ := ret[0].(*CategoryQuestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByCategoryId indicates an expected call of FindOneByCategoryId.
func (mr *MockCategoryQuestionRecorderMockRecorder) FindOneByCategoryId(db, categoryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByCategoryId", reflect.TypeOf((*MockCategoryQuestionRecorder)(nil).FindOneByCategoryId), db, categoryId)
}

// Get mocks base method.
func (m *MockCategoryQuestionRecorder) Get(db *sql.DB, id uint64) (*CategoryQuestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", db, id)
	ret0, _ := ret[0].(*CategoryQuestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCategoryQuestionRecorderMockRecorder) Get(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCategoryQuestionRecorder)(nil).Get), db, id)
}

// List mocks base method.
func (m *MockCategoryQuestionRecorder) List(db *sql.DB, lastID *wrapperspb.UInt64Value, asc bool, limit int64) ([]*CategoryQuestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", db, lastID, asc, limit)
	ret0, _ := ret[0].([]*CategoryQuestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCategoryQuestionRecorderMockRecorder) List(db, lastID, asc, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCategoryQuestionRecorder)(nil).List), db, lastID, asc, limit)
}

// Save mocks base method.
func (m *MockCategoryQuestionRecorder) Save(db *sql.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", db)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCategoryQuestionRecorderMockRecorder) Save(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCategoryQuestionRecorder)(nil).Save), db)
}
