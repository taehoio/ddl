// Code generated by MockGen. DO NOT EDIT.
// Source: ./oneonone_dml_question.pb.go

// Package oneononeddlv1 is a generated GoMock package.
package oneononeddlv1

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// MockQuestionRecorder is a mock of QuestionRecorder interface.
type MockQuestionRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionRecorderMockRecorder
}

// MockQuestionRecorderMockRecorder is the mock recorder for MockQuestionRecorder.
type MockQuestionRecorderMockRecorder struct {
	mock *MockQuestionRecorder
}

// NewMockQuestionRecorder creates a new mock instance.
func NewMockQuestionRecorder(ctrl *gomock.Controller) *MockQuestionRecorder {
	mock := &MockQuestionRecorder{ctrl: ctrl}
	mock.recorder = &MockQuestionRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionRecorder) EXPECT() *MockQuestionRecorderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockQuestionRecorder) Get(db *sql.DB, id uint64) (*Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", db, id)
	ret0, _ := ret[0].(*Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQuestionRecorderMockRecorder) Get(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQuestionRecorder)(nil).Get), db, id)
}

// List mocks base method.
func (m *MockQuestionRecorder) List(db *sql.DB, lastID *wrapperspb.UInt64Value, asc bool, limit int64) ([]*Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", db, lastID, asc, limit)
	ret0, _ := ret[0].([]*Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockQuestionRecorderMockRecorder) List(db, lastID, asc, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockQuestionRecorder)(nil).List), db, lastID, asc, limit)
}

// Save mocks base method.
func (m *MockQuestionRecorder) Save(db *sql.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", db)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockQuestionRecorderMockRecorder) Save(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockQuestionRecorder)(nil).Save), db)
}
